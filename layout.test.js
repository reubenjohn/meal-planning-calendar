/**
 * @jest-environment jsdom
 */

const { renderGrid } = require('./meal-planner');

describe('Layout Tests', () => {
    beforeEach(() => {
        // Set up DOM structure
        document.body.innerHTML = `
            <div class="container">
                <h1>üçΩÔ∏è Meal Planning Calendar</h1>
                <div class="main-grid" id="main-grid">
                    <!-- Grid will be generated by JavaScript -->
                </div>
                <div class="legend">
                    <div class="legend-item">
                        <div class="legend-color lunch"></div>
                        <span>Lunch</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color dinner"></div>
                        <span>Dinner</span>
                    </div>
                </div>
            </div>
        `;
        
        // Render the grid
        renderGrid();
    });

    test('should create main grid container', () => {
        const mainGrid = document.getElementById('main-grid');
        expect(mainGrid).toBeTruthy();
        expect(mainGrid.className).toBe('main-grid');
    });

    test('should render 8 columns (1 empty + 7 days) in header row', () => {
        const mainGrid = document.getElementById('main-grid');
        const children = Array.from(mainGrid.children);
        
        // First 8 elements: empty cell + 7 day headers
        const headerElements = children.slice(0, 8);
        expect(headerElements).toHaveLength(8);
        
        // First should be empty
        expect(headerElements[0].textContent).toBe('');
        
        // Next 7 should be day headers
        const dayHeaders = headerElements.slice(1);
        const expectedDays = ['üßë‚Äçüç≥ Saturday', 'Sunday', 'Monday', 'üßë‚Äçüç≥ Tuesday', 'Wednesday', 'Thursday', 'Friday'];
        
        dayHeaders.forEach((header, index) => {
            expect(header.className).toBe('day-header');
            expect(header.textContent).toBe(expectedDays[index]);
        });
    });

    test('should render 4 week rows with 8 elements each', () => {
        const mainGrid = document.getElementById('main-grid');
        const children = Array.from(mainGrid.children);
        
        // Should have header row (8) + 4 week rows (8 each) = 40 total
        expect(children).toHaveLength(40);
        
        // Check each week row
        for (let week = 1; week <= 4; week++) {
            const weekRowStart = 8 + (week - 1) * 8; // Skip header row
            const weekElements = children.slice(weekRowStart, weekRowStart + 8);
            
            // First element should be week header
            expect(weekElements[0].className).toBe('week-header');
            expect(weekElements[0].textContent).toBe(`Week ${week}`);
            
            // Next 7 should be day cards
            const dayCards = weekElements.slice(1);
            dayCards.forEach(card => {
                expect(card.className).toMatch(/day-card/);
            });
        }
    });

    test('should mark cook days with cook-day class', () => {
        const mainGrid = document.getElementById('main-grid');
        const dayCards = Array.from(mainGrid.children).filter(el => 
            el.className.includes('day-card')
        );
        
        // Should have 28 day cards total (4 weeks √ó 7 days)
        expect(dayCards).toHaveLength(28);
        
        // Check cook days for each week (Saturday=0, Tuesday=3 in 0-indexed days)
        for (let week = 0; week < 4; week++) {
            const weekCards = dayCards.slice(week * 7, (week + 1) * 7);
            
            // Saturday (index 0) and Tuesday (index 3) should have cook-day class
            expect(weekCards[0].className).toMatch(/cook-day/);
            expect(weekCards[3].className).toMatch(/cook-day/);
            
            // Other days should not have cook-day class
            [1, 2, 4, 5, 6].forEach(dayIndex => {
                expect(weekCards[dayIndex].className).not.toMatch(/cook-day/);
            });
        }
    });

    test('should display cook indicators in day headers', () => {
        const mainGrid = document.getElementById('main-grid');
        const dayHeaders = Array.from(mainGrid.querySelectorAll('.day-header'));
        
        // Should have 7 day headers
        expect(dayHeaders).toHaveLength(7);
        
        // Saturday (index 0) and Tuesday (index 3) should have cook indicators
        expect(dayHeaders[0].textContent).toBe('üßë‚Äçüç≥ Saturday');
        expect(dayHeaders[3].textContent).toBe('üßë‚Äçüç≥ Tuesday');
        
        // Other days should not have cook indicators
        expect(dayHeaders[1].textContent).toBe('Sunday');
        expect(dayHeaders[2].textContent).toBe('Monday');
        expect(dayHeaders[4].textContent).toBe('Wednesday');
        expect(dayHeaders[5].textContent).toBe('Thursday');
        expect(dayHeaders[6].textContent).toBe('Friday');
    });

    test('should display meals without L:/D: prefixes', () => {
        const mainGrid = document.getElementById('main-grid');
        const mealItems = Array.from(mainGrid.querySelectorAll('.meal-item'));
        
        // Should have meal items
        expect(mealItems.length).toBeGreaterThan(0);
        
        // Check lunch items don't start with "L:"
        const lunchItems = mealItems.filter(item => item.className.includes('lunch'));
        lunchItems.forEach(item => {
            expect(item.textContent).not.toMatch(/^L:/);
        });
        
        // Check dinner items don't start with "D:"
        const dinnerItems = mealItems.filter(item => item.className.includes('dinner'));
        dinnerItems.forEach(item => {
            expect(item.textContent).not.toMatch(/^D:/);
        });
    });

    test('should have responsive CSS classes', () => {
        const mainGrid = document.getElementById('main-grid');
        expect(mainGrid.className).toBe('main-grid');
        
        const weekHeaders = Array.from(document.querySelectorAll('.week-header'));
        expect(weekHeaders).toHaveLength(4);
        
        const dayHeaders = Array.from(document.querySelectorAll('.day-header'));
        expect(dayHeaders).toHaveLength(7);
    });

    test('should not have week selector buttons (removed in grid layout)', () => {
        const weekButtons = Array.from(document.querySelectorAll('.week-btn'));
        expect(weekButtons).toHaveLength(0);
        
        const weekSelector = document.querySelector('.week-selector');
        expect(weekSelector).toBeFalsy();
    });

    test('should have legend with lunch and dinner indicators', () => {
        const legend = document.querySelector('.legend');
        expect(legend).toBeTruthy();
        
        const legendItems = Array.from(document.querySelectorAll('.legend-item'));
        expect(legendItems).toHaveLength(2);
        
        const lunchLegend = legendItems.find(item => item.textContent.includes('Lunch'));
        const dinnerLegend = legendItems.find(item => item.textContent.includes('Dinner'));
        
        expect(lunchLegend).toBeTruthy();
        expect(dinnerLegend).toBeTruthy();
        
        // Check legend colors
        const lunchColor = lunchLegend.querySelector('.legend-color.lunch');
        const dinnerColor = dinnerLegend.querySelector('.legend-color.dinner');
        
        expect(lunchColor).toBeTruthy();
        expect(dinnerColor).toBeTruthy();
    });
});